generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  birthDate     DateTime
  gender        Gender
  dni           String      @unique
  phone         String
  postalCode    String
  address       String
  city          String
  province      String
  email         String      @unique
  createdAt     DateTime    @default(now())
  lastOrderDate DateTime?
  roles         Role[]      @default([USER])
  country       String
  lastName      String?
  name          String
  surname       String
  password      String
  instagram     String?
  tiktok        String?
  payments      Payment[]
  classes       UserClass[]
}

model Class {
  id          String          @id @default(uuid())
  name        String
  description String?
  maxCapacity Int
  room        String
  zoneId      String?
  color       String?
  classId     Int             @default(autoincrement())
  zone        Zone?           @relation(fields: [zoneId], references: [id])
  schedules   ClassSchedule[]
  userClasses UserClass[]
}

model Zone {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  classes     Class[]
}

model UserClass {
  id       String   @id @default(uuid())
  userId   String
  classId  String
  date     DateTime
  joinedAt DateTime @default(now())
  class    Class    @relation(fields: [classId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, classId, date])
}

model ClassSchedule {
  id         String     @id @default(uuid())
  classId    String
  weekday    Weekday
  monitor    String
  difficulty Difficulty
  capacity   Int
  startTime  DateTime
  endTime    DateTime
  class      Class      @relation(fields: [classId], references: [id])
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  type            PaymentType
  price           Float
  total           Float
  discount        Float         @default(0)
  status          PaymentStatus @default(UNPAID)
  paymentDate     DateTime
  nextPaymentDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}

enum Gender {
  M
  F
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum PaymentType {
  COMBO
  TARIFA
  CREDITOS
  MATRICULA
}

enum PaymentStatus {
  PAID
  CANCELLED
  UNPAID
}
